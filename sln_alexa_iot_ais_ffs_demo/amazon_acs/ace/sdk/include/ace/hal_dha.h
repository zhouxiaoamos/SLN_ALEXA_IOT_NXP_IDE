/*
 * Copyright 2018-2020 Amazon.com, Inc. or its affiliates. All rights reserved.
 *
 * AMAZON PROPRIETARY/CONFIDENTIAL
 *
 * You may not use this file except in compliance with the terms and
 * conditions set forth in the accompanying LICENSE.TXT file.
 *
 * THESE MATERIALS ARE PROVIDED ON AN "AS IS" BASIS. AMAZON SPECIFICALLY
 * DISCLAIMS, WITH RESPECT TO THESE MATERIALS, ALL WARRANTIES, EXPRESS,
 * IMPLIED, OR STATUTORY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
 */
/**
 * @file hal_dha.h
 *
 * @addtogroup ACS_HAL_DHAV2
 *
 * ADDITIONAL DETAILS
 * ------------------
 *
 * For porting suggestions, guides, or typical implementation details, check
 * the @ref DHAV2_PORTING_GUIDE "DHAv2 porting guide".
 *
 * USAGE
 * -----
 *
 * Steps to setup and use the DHA HAL interface:
 * aceDhaHal_open() needs to be called first to ensure APIs are ready for use.
 *
 * @{
 */

#ifndef ACE_HAL_DHA_H_
#define ACE_HAL_DHA_H_

#ifdef __cplusplus
extern "C" {
#endif

#include <stddef.h>
#include <stdint.h>
#include <ace/ace_status.h>

#define aceDhaHal_generate_dha_key aceDhaHal_generateKey /**< @deprecated Use @ref aceDhaHal_generateKey instead */
#define aceDhaHal_get_dha_key_public aceDhaHal_getPublicKey /**< @deprecated Use @ref aceDhaHal_getPublicKey instead */
#define aceDhaHal_sign_data aceDhaHal_signData /**< @deprecated Use @ref aceDhaHal_signData instead */
#define aceDhaHal_verify_data aceDhaHal_verifyData /**< @deprecated Use @ref aceDhaHal_verifyData instead */
#define aceDhaHal_get_field aceDhaHal_getField /**< @deprecated Use @ref aceDhaHal_getField instead */
#define aceDhaHal_set_certificate aceDhaHal_setCertificate /**< @deprecated Use @ref aceDhaHal_setCertificate instead */
#define aceHal_dha_fields_t aceDhaHal_fields_t /**< @deprecated Use @ref aceDhaHal_fields_t instead */
#define ACE_DHA_SOC_ID ACE_DHA_HAL_SOC_ID /**< @deprecated Use @ref ACE_DHA_HAL_SOC_ID instead */
#define ACE_DHA_DSN ACE_DHA_HAL_DSN /**< @deprecated Use @ref ACE_DHA_HAL_DSN instead */
#define ACE_DHA_CSR ACE_DHA_HAL_CSR /**< @deprecated Use @ref ACE_DHA_HAL_CSR instead */
#define ACE_DHA_CERTIFICATE_CHAIN ACE_DHA_HAL_CERTIFICATE_CHAIN /**< @deprecated Use @ref ACE_DHA_HAL_CERTIFICATE_CHAIN instead */
#define ACE_DHA_LEAF_CERTIFICATE ACE_DHA_HAL_LEAF_CERTIFICATE /**< @deprecated Use @ref ACE_DHA_HAL_LEAF_CERTIFICATE instead */

/**
 * Enum used to specify the field types
 *
 * @note The hex formatting/definition of these values has no other implied usage or meaning. Please
 *       also avoid referencing them directly whenever possible.
 */
typedef enum aceDhaHal_fields {
    ACE_DHA_HAL_SOC_ID = 0x01,               /**< Hexadecimal string containing a hardware identifier of the device. */
    ACE_DHA_HAL_DSN = 0x101,                 /**< Device Serial Number (DSN) of the device as an ASCII string. Not applicable to devices not manufactured by Amazon. */
    ACE_DHA_HAL_CSR = 0x201,                 /**< Certificate Signing Request (CSR) generated by the device. */
    ACE_DHA_HAL_CERTIFICATE_CHAIN = 0x202,   /**< Complete certificate chain (each certificate in PEM format) of the device. */
    ACE_DHA_HAL_LEAF_CERTIFICATE = 0x203,    /**< Leaf certificate (PEM format) of the complete certificate chain of the device. */
    ACE_DHA_HAL_HMAC = 0x204                 /**< Legacy - HMAC of the device. */
} aceDhaHal_fields_t;

/**
 * @brief Opens (init) the DHA HAL
 *
 * Open MUST be called before using any HAL API.
 *
 * @return ACE_STATUS_OK on success, and a negative value from @ref ace_status_t otherwise
 */
ace_status_t aceDhaHal_open(void);

/**
 * @brief Generates a DHA key-pair
 *
 * This tells the platform-specific module to generate an asymmetric key-pair
 * to be used as the DHA key-pair. For DHAv2, the key parameters will be
 * an Elliptic Curve (EC) 256-bit key over the prime256v1 curve (aka
 * NIST P-256, secp256r1).
 *
 * If the DHA key already exists on the device, the key-pair will not be created
 * again and this call SHOULD fail and return ACE_STATUS_ALREADY_EXISTS.
 *
 * There is no DHA API to delete the current key on device.
 *
 * @return ACE_STATUS_ALREADY_EXISTS if the key-pair already exists on device.
 *
 * @return ACE_STATUS_OK on success, and a negative value from @ref ace_status_t otherwise
 */
int aceDhaHal_generateKey(void);

/**
 * @brief Retrieves the DHA public key
 *
 * This returns the DHA public key to the caller.
 *
 * Below is the data format of the retrieved DHA public key depending on
 * the key algorithm used.
 *
 * EC: DER-encoded data in SubjectPublicKeyInfo format (RFC5480),
 *     with curve parameters specified as a nameCurve object
 *     identifier (e.g. 1.2.840.10045.3.1.7 for ptime256v1)
 *
 * @param[out] x509_data Pointer to data allocated by the HAL implementation to return
 *                       the DER-encoded DHA public key
 *
 * @param[out] x509_data_len Pointer to length of public key to be set by the HAL
 *                           implementation
 *
 * @return ACE_STATUS_OK on success, and a negative value from @ref ace_status_t otherwise
 */
int aceDhaHal_getPublicKey(uint8_t** x509_data, size_t* x509_data_len);

/**
 * @brief Signs a SHA256 digest using the DHA private key and returns
 *        the signature and its length
 *
 * The input data is assumed to be a SHA256 digest. DHA APIs contract assumes
 * that it is the caller's responsibility to hash the input data using
 * SHA256 before passing to the HAL implementation. Input data lengths not equal
 * to a SHA256 digest will result in failure. Current signature scheme
 * is ECDSA.
 *
 * @note Length of the signature data is not a fixed number. For ECDSA,
 *       signature data is a DER-encoded array of 2 large unsigned integers
 *       r and s. Callers should not assume a fixed length and must use the
 *       size returned in signed_data_len.
 *
 * @param[in] data Pointer to SHA256 digest input
 *
 * @param[in] data_len Length of input data
 *
 * @param[out] signed_data Pointer to data allocated by the HAL implementation to
 *                         return the signature
 *
 * @param[out] signed_data_len Pointer to length of signature to be set by DHA API
 *                             implementation
 *
 * @return ACE_STATUS_OK on success, and a negative value from @ref ace_status_t otherwise
 */
int aceDhaHal_signData(const uint8_t* data, const size_t data_len,
                       uint8_t** signed_data, size_t* signed_data_len);

/**
 * @brief Verifies a SHA256 digest using the DHA public key given
 *        the corresponding signature
 *
 * The input data is assumed to be a SHA256 digest. DHA APIs assume
 * that it is the caller's responsibility to hash the input data using
 * SHA256 before passing to the HAL implementation. Input data lengths not equal
 * to a SHA256 digest will result in failure. Current signature scheme
 * is ECDSA.
 *
 * DHAv2: ECDSA with SHA256 as the hash algorithm
 *
 * @param[in] data Pointer to SHA256 digest input
 *
 * @param[in] data_len Length of input data
 *
 * @param[in] signature Pointer to signature data
 *
 * @param[in] signature_len Length of signature data
 *
 * @return ACE_STATUS_OK on success, and a negative value from @ref ace_status_t otherwise
 */
int aceDhaHal_verifyData(const uint8_t* data, const size_t data_len,
                         const uint8_t* signature, const size_t signature_len);

/**
 * @brief Retrieves additional DHA fields
 *
 * DHA module maintains different meta-data related to its operation. If the
 * enum is applicable, the module should allocate memory for the data and pass it
 * back to the caller, otherwise it shall return an error. It is the caller's
 * responsibility to properly free the data afterwards. Below is the list of
 * enums the DHA module shall support:
 *
 * @param [in] type - specify the field type using @ref aceDhaHal_fields_t
 *
 * @ref ACE_DHA_HAL_SOC_ID
 *
 * @ref ACE_DHA_HAL_DSN
 *
 * Devices not manufactured by Amazon should return an error.
 *
 * @ref ACE_DHA_HAL_CSR
 *
 * DHAv2 Certificate Signing Request (CSR) based on the current device information.
 *
 * Distinguished Name (DN) of the CSR should have the following OIDs embedded:
 *
 * @p 1.3.6.1.4.1.4843.1.1 - Device Serial Number (DSN) of the device. Omit if
 *                           devices not manufactured by Amazon.
 *
 * @p 1.3.6.1.4.1.4843.1.2 - Optional: Hexadecimal string containing a hardware
 *                           identifier of the device. Omit the field if not
 *                           supported by hardware.
 *
 * @p 1.3.6.1.4.1.4843.1.3 - Device Type ID for the particular device.
 *
 * Sample CSR is provided below:
 *
 * @verbatim
   -----BEGIN CERTIFICATE REQUEST-----
   MIIBOTCB4QIBADBhMR8wHQYJKwYBBAGlawEBDBBHWFgwVFNQMUg0V0tQMkhKMR8w
   HQYJKwYBBAGlawECDBAwMDAwMDAwMGQ0YzM3MGRjMR0wGwYJKwYBBAGlawEDDA5B
   MlVNSUhNVkRFUEJQRzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABLIgXnJQpM5K
   1mEzmKpxrXPZiLuJIIVIV/tUuaJYfJA5z9rQnc7VSD6LQxwwcV+DhJpops8NQSRB
   2F0N2pBerBmgHjAcBgkqhkiG9w0BCQ4xDzANMAsGA1UdDwQEAwIHgDAKBggqhkjO
   PQQDAgNHADBEAiB0iiinV6mShYpj2QQ/MWaJMFjOa/0IFEJU/qj4wDy9CgIgVxoO
   PKTzhDCRs+P6GGGbsEr/d2Bfq3MTFSLL82TZHY0=
   -----END CERTIFICATE REQUEST-----
   @endverbatim
 *
 * @ref ACE_DHA_HAL_CERTIFICATE_CHAIN
 *
 * DHAv2 certificate chain provisioned into the device
 *
 * @ref ACE_DHA_HAL_LEAF_CERTIFICATE
 *
 * DHAv2 leaf certificate provisioned into the device. The leaf certificate
 * is essentially the first certificate in the DHAv2 certificate chain.
 *
 * @param[out] input Pointer to data allocated by DHA API to return
 *                   the requested meta-data
 *
 * @param[out] size Pointer to length of requested meta-data to be
 *                  set by DHA API
 *
 * @return ACE_STATUS_OK on success, and a negative value from @ref ace_status_t otherwise
 */
int aceDhaHal_getField(int type, void** input, size_t* size);

/**
 * @brief Sets the DHAv2 certificate chain of the device
 *
 * This API will perform checks on the certificate chain
 * before storing it:
 *
 * - Public key in the leaf certificate needs to match the
 *   one on device
 * - Meta-data such as DSN (Applicable to Amazon devices only) also
 *   needs to match the one on device
 * - The input certificate chain must verify up to the Amazon-owned
 *   DHAv2 Root CA
 *
 * Amazon's DHAv2 Root CA is provided below:
 *
 * @verbatim
   -----BEGIN CERTIFICATE-----
   MIIDNjCCAtugAwIBAgIJAKpBxYNyH8biMAoGCCqGSM49BAMCMIGUMRQwEgYDVQQK
   DAtBbWF6b24gSW5jLjEjMCEGA1UECwwaRGV2aWNlIE1hbmFnZW1lbnQgU2Vydmlj
   ZXMxEDAOBgNVBAcMB1NlYXR0bGUxEzARBgNVBAgMCldhc2hpbmd0b24xCzAJBgNV
   BAYTAlVTMSMwIQYDVQQDDBpBbWF6b25ESEEgUm9vdCBDZXJ0aWZpY2F0ZTAgFw0x
   NzExMTYwNjI3MDlaGA8yMTE3MTEwODA2MjcwOVowgZQxFDASBgNVBAoMC0FtYXpv
   biBJbmMuMSMwIQYDVQQLDBpEZXZpY2UgTWFuYWdlbWVudCBTZXJ2aWNlczEQMA4G
   A1UEBwwHU2VhdHRsZTETMBEGA1UECAwKV2FzaGluZ3RvbjELMAkGA1UEBhMCVVMx
   IzAhBgNVBAMMGkFtYXpvbkRIQSBSb290IENlcnRpZmljYXRlMFkwEwYHKoZIzj0C
   AQYIKoZIzj0DAQcDQgAEv7+Zfvkc+qvUaKgaGxQMZoDFHQ18Z5OSXB4BNkYRszgR
   PQ82o54KVb0RKkkq0e3niRn1gUZ8jozePEPrpPV5yaOCARAwggEMMA8GA1UdEwEB
   /wQFMAMBAf8wHQYDVR0OBBYEFGGL3E8kSqVu7gplvLx0mlGV6qtgMIHJBgNVHSME
   gcEwgb6AFGGL3E8kSqVu7gplvLx0mlGV6qtgoYGapIGXMIGUMRQwEgYDVQQKDAtB
   bWF6b24gSW5jLjEjMCEGA1UECwwaRGV2aWNlIE1hbmFnZW1lbnQgU2VydmljZXMx
   EDAOBgNVBAcMB1NlYXR0bGUxEzARBgNVBAgMCldhc2hpbmd0b24xCzAJBgNVBAYT
   AlVTMSMwIQYDVQQDDBpBbWF6b25ESEEgUm9vdCBDZXJ0aWZpY2F0ZYIJAKpBxYNy
   H8biMA4GA1UdDwEB/wQEAwIBhjAKBggqhkjOPQQDAgNJADBGAiEAoCM4t1cMuTeu
   8yIlw/1BUIUb1Q4MYXp+LyfjcbmVz8ECIQDuKW8gQZjUS8Z7GcgNYnFup3UjTznj
   5ja4/PmvDx0Glw==
   -----END CERTIFICATE-----
   @endverbatim
 *
 * @param[in] certificate Pointer to certificate chain with PEM-encoded
 *                        certificates
 *
 * @return ACE_STATUS_OK on success, and a negative value from @ref ace_status_t otherwise
 */
int aceDhaHal_setCertificate(const char* certificate);

/**
 * @brief Closes (de-init) the DHA HAL
 *
 * Close MUST be called when exiting HAL API.
 *
 * @return ACE_STATUS_OK on success, and a negative value from @ref ace_status_t otherwise
 */
ace_status_t aceDhaHal_close(void);

#ifdef __cplusplus
}
#endif

#endif /* ACE_HAL_DHA_H_ */
/** @} */
