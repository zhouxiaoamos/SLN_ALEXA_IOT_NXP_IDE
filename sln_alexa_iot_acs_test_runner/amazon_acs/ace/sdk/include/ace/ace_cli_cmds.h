/*
 * Copyright 2021 Amazon.com, Inc. or its affiliates. All rights reserved.
 *
 * AMAZON PROPRIETARY/CONFIDENTIAL
 *
 * You may not use this file except in compliance with the terms and
 * conditions set forth in the accompanying LICENSE.TXT file. This file is a
 * Modifiable File, as defined in the accompanying LICENSE.TXT file.
 *
 * THESE MATERIALS ARE PROVIDED ON AN "AS IS" BASIS. AMAZON SPECIFICALLY
 * DISCLAIMS, WITH RESPECT TO THESE MATERIALS, ALL WARRANTIES, EXPRESS,
 * IMPLIED, OR STATUTORY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
 */

/*-------------------------------------\
|                                      |
| this file is automatically generated |
|            do not modify             |
|                                      |
\_____________________________________*/

#include <stdint.h>
#include <ace/ace_config.h>
ace_status_t ace_att_cli(int32_t len, const char *param[]);
ace_status_t aceDispatcher_debugCli(int32_t len, const char *param[]);
ace_status_t demo_hello_world_test(int32_t len, const char *param[]);
ace_status_t demoHelloWorldUserTest(int32_t len, const char *param[]);
ace_status_t demo_multi_instance_test(int32_t len, const char *param[]);
ace_status_t dispatcherDemo_client_main(int32_t len, const char *param[]);
ace_status_t aceDispatcher_setVerbosityIdxCli(int32_t len, const char *param[]);
ace_status_t aceDispatcher_tests_main(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxAddCharacteristic(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxAddDescriptor(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxAddIncludedService(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxAddService(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxAddServiceBlob(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxBatchscanCfgStorage(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxBatchscanDisBatchScan(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxBatchscanEndBatchScan(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxBatchscanReadReports(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxBleAdapterInit(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTGetBluetoothInterface(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxBtManagerCleanup(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxBtManagerInit(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_ClearEventQueue(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_gattclient_pxConfigureMtu(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxConnect(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_gattclient_pxDisconnect(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxConfigureMtu(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTConnectionCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxConnParameterUpdateRequest(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxDeleteService(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxDisable(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxEnable(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxExecuteWrite(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_Free(int32_t len, const char *param[]);
ace_status_t acehal_bt_gattclient_comp(int32_t len, const char *param[]);
ace_status_t gattClient_connect(int32_t len, const char *param[]);
ace_status_t IotTestBleHal_DeInit(int32_t len, const char *param[]);
ace_status_t gattClient_disconnect(int32_t len, const char *param[]);
ace_status_t IotTestBleHal_EnableFilter(int32_t len, const char *param[]);
ace_status_t gattClient_getDb(int32_t len, const char *param[]);
ace_status_t gattClient_init(int32_t len, const char *param[]);
ace_status_t gattClient_pair(int32_t len, const char *param[]);
ace_status_t gattClient_readChar(int32_t len, const char *param[]);
ace_status_t gattClient_readDesp(int32_t len, const char *param[]);
ace_status_t gattClient_registerNotify(int32_t len, const char *param[]);
ace_status_t gattClient_removeBond(int32_t len, const char *param[]);
ace_status_t IotTestBleHal_ReadRemoteRssi(int32_t len, const char *param[]);
ace_status_t gattClient_scan(int32_t len, const char *param[]);
ace_status_t IotTestBleHal_SetupFilter(int32_t len, const char *param[]);
ace_status_t gattClient_stopscan(int32_t len, const char *param[]);
ace_status_t gattClient_writeChar(int32_t len, const char *param[]);
ace_status_t gattClient_writeDesp(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxGattClientInit(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxGattServerInit(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxGetBleAdapterProperty(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxGetDeviceProperty(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_ppvGetGattClientInterface(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxGetGattDb(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_ppvGetGattServerInterface(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxGetLeAdapter(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTMtuChangedCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxMultiAdvDisable(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxMultiAdvEnable(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxMultiAdvSetInstData(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxMultiAdvUpdate(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTNotifyCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxPair(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTPairingStateChangedCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxReadCharacteristic(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxReadDescriptor(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxReadRemoteRssi(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxRefresh(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxRegisterBleApp(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxRegisterClient(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxRegisterForNotification(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxRegisterServer(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxRemoveBond(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTRequestExecWriteCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTRequestReadCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTRequestWriteCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxScan(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxScanFilterAddRemove(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxScanFilterClear(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxScanFilterEnable(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxScanFilterParamSetup(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTScanResultCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxSearchService(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxSendIndication(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxSendResponse(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxDisconnect(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxSetAdvData(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxSetDeviceProperty(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxSetScanParameters(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_Setup(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxSspReply(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTSspRequestCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_BTSspRequestConfirmationCallback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxStartAdv(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxStartService(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxStopAdv(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxStopService(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_switch_callback(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxTestCommand(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxUnregisterBleApp(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxUnregisterClient(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxUnregisterForNotification(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxUnregisterServer(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxWriteCharacteristic(int32_t len, const char *param[]);
ace_status_t acehal_bt_tests_cli_pxWriteDescriptor(int32_t len, const char *param[]);
ace_status_t cli_demo_module_main(int32_t len, const char *param[]);
ace_status_t cli_override_demo_main(int32_t len, const char *param[]);
ace_status_t cli_tests_functional_main(int32_t len, const char *param[]);
ace_status_t cli_tests_check_args(int32_t len, const char *param[]);
ace_status_t aceEventMgrCli_entry(int32_t len, const char *param[]);
ace_status_t aceEventMgrDemo_entry(int32_t len, const char *param[]);
ace_status_t eventmgr_tests_entry(int32_t len, const char *param[]);
ace_status_t device_info_cli_main(int32_t len, const char *param[]);
ace_status_t acehal_device_info_tests_main(int32_t len, const char *param[]);
ace_status_t aceDhaHal_get_field_cli(int32_t len, const char *param[]);
ace_status_t aceDhaHal_get_dha_key_public_cli(int32_t len, const char *param[]);
ace_status_t aceDhaHal_generate_dha_key_cli(int32_t len, const char *param[]);
ace_status_t aceDhaHal_set_certificate_cli(int32_t len, const char *param[]);
ace_status_t aceDhaHal_sign_data_cli(int32_t len, const char *param[]);
ace_status_t acehal_dha_tests_main(int32_t len, const char *param[]);
ace_status_t aceDhaHal_verify_data_cli(int32_t len, const char *param[]);
ace_status_t factory_reset_hal_helper(int32_t len, const char *param[]);
ace_status_t test_hal_factory_reset_main(int32_t len, const char *param[]);
ace_status_t kvs_cli_main(int32_t len, const char *param[]);
ace_status_t acehal_kv_storage_returncodes_main(int32_t len, const char *param[]);
ace_status_t acehal_kv_storage_tests_main(int32_t len, const char *param[]);
ace_status_t acehal_log_tests_main(int32_t len, const char *param[]);
ace_status_t halWifiCli_main(int32_t len, const char *param[]);
ace_status_t acehal_wifi_tests_main(int32_t len, const char *param[]);
ace_status_t aceConnCli_sample_http_post(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_debug_cmd(int32_t len, const char *param[]);
ace_status_t ace_acm_tests_main(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_large_get(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_lws(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_multi_tls_get(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_simple_get(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_simple_get_cancel(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_simple_get_large_header(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_simple_get_rc(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_simple_get_retry(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_simple_get_timeout(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_simple_post(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_ss(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_ss_alexa(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_ss_mqtt(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_ss_proxy(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_time(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_tls_get(int32_t len, const char *param[]);
ace_status_t aceConnCli_test_url(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleAddCharacteristics(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleAddCharacteristicsWithDesc(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleAddIncludedService(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleAddService(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleCheckConnCbRcvd(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleConnPrioReq(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleCreateService(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleDeregisterBeaconClient(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleDeregisterGattServer(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleGetMtuReq(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleCheckReadReqCbRcvd(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleRegisterBeaconClient(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleRegisterGattServer(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleSendNotification(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleSendResponse(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleStartBeacon(int32_t len, const char *param[]);
ace_status_t aceBtCli_bleStopBeacon(int32_t len, const char *param[]);
ace_status_t aceBtCli_deinit(int32_t len, const char *param[]);
ace_status_t aceBtCli_disable(int32_t len, const char *param[]);
ace_status_t aceBtCli_enable(int32_t len, const char *param[]);
ace_status_t aceBtCli_getAdapterName(int32_t len, const char *param[]);
ace_status_t aceBtCli_getAdapterProp(int32_t len, const char *param[]);
ace_status_t aceBtCli_getBtSession(int32_t len, const char *param[]);
ace_status_t aceBtCli_init(int32_t len, const char *param[]);
ace_status_t aceBtCli_getRadioState(int32_t len, const char *param[]);
ace_status_t aceBtCli_setAdapterName(int32_t len, const char *param[]);
ace_status_t factory_reset_main(int32_t len, const char *param[]);
ace_status_t ffs_cli_entry(int32_t len, const char *param[]);
ace_status_t ace_log_cli_main(int32_t len, const char *param[]);
ace_status_t acelog_tests_main(int32_t len, const char *param[]);
ace_status_t device_register_map_cli_main(int32_t len, const char *param[]);
ace_status_t map_test_cli_main(int32_t len, const char *param[]);
ace_status_t aceWifiCli_addNetwork(int32_t len, const char *param[]);
ace_status_t aceWifiCli_connect(int32_t len, const char *param[]);
ace_status_t aceWifiCli_createAP(int32_t len, const char *param[]);
ace_status_t aceWifiCli_disableNetworks(int32_t len, const char *param[]);
ace_status_t aceWifiCli_disableNAT(int32_t len, const char *param[]);
ace_status_t aceWifiCli_disableTcpTunnel(int32_t len, const char *param[]);
ace_status_t aceWifiCli_disconnect(int32_t len, const char *param[]);
ace_status_t aceWifiCli_enableNetworks(int32_t len, const char *param[]);
ace_status_t aceWifiCli_enableNAT(int32_t len, const char *param[]);
ace_status_t aceWifiCli_enableTcpTunnel(int32_t len, const char *param[]);
ace_status_t aceWifiCli_evaluateCaptive(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getCaptivePortalState(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getCapabilityInfo(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getConfiguredNetworks(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getConnectionInfo(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getCountryCode(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getDetailedScanResults(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getIpInfo(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getLogLevel(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getMacAddress(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getMd5(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getNetworkState(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getScanResults(int32_t len, const char *param[]);
ace_status_t aceWifiCli_getStatisticInfo(int32_t len, const char *param[]);
ace_status_t aceWifiCli_runGetDefaultIntegrationTestConfig(int32_t len, const char *param[]);
ace_status_t aceWifiCli_isWifiReady(int32_t len, const char *param[]);
ace_status_t aceWifiCli_runIperf(int32_t len, const char *param[]);
ace_status_t aceWifiCli_mscanTest(int32_t len, const char *param[]);
ace_status_t aceWifiCli_ping(int32_t len, const char *param[]);
ace_status_t aceWifiCli_removeAP(int32_t len, const char *param[]);
ace_status_t aceWifiCli_removeNetwork(int32_t len, const char *param[]);
ace_status_t aceWifiCli_saveConfig(int32_t len, const char *param[]);
ace_status_t aceWifiCli_scan(int32_t len, const char *param[]);
ace_status_t aceWifiCli_setCountryCode(int32_t len, const char *param[]);
ace_status_t aceWifiCli_setLogLevel(int32_t len, const char *param[]);
ace_status_t aceWifiCli_runSetIntegrationTestConfig(int32_t len, const char *param[]);
ace_status_t aceWifiCli_runIntegrationTest(int32_t len, const char *param[]);
ace_status_t osal_alloc_tests_main(int32_t len, const char *param[]);
ace_status_t osal_atomic_tests_main(int32_t len, const char *param[]);
ace_status_t osal_IpMutex_tests_main(int32_t len, const char *param[]);
ace_status_t osal_mp_tests_main(int32_t len, const char *param[]);
ace_status_t osal_mutex_tests_main(int32_t len, const char *param[]);
ace_status_t osal_message_queue_tests_main(int32_t len, const char *param[]);
ace_status_t aceRand_cli_main(int32_t len, const char *param[]);
ace_status_t osal_rand_tests_main(int32_t len, const char *param[]);
ace_status_t osal_semaphore_tests_main(int32_t len, const char *param[]);
ace_status_t aceShmem_cli_main(int32_t len, const char *param[]);
ace_status_t osal_shmem_tests_main(int32_t len, const char *param[]);
ace_status_t osal_thread_tests_main(int32_t len, const char *param[]);
ace_status_t osal_time_tests_main(int32_t len, const char *param[]);
ace_status_t aceTime_cli_main(int32_t len, const char *param[]);
ace_status_t ace_sys_heap_stats_cli(int32_t len, const char *param[]);
ace_status_t ace_sys_task_stats_cli(int32_t len, const char *param[]);

#include "ace_cli_cmds_config.h"
#define ROUND_UP_TO_KB(bytes) ((bytes / 1024) + ((bytes % 1024) ? 1 : 0))
#define ACE_RTOS_CLI_CMDS ACE_CLI_ENTRY
#define ACE_CLI_ENTRY {"ace", "ACE Commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_cli},

const aceCli_moduleCmd_t ace_dispatcher_demo_cli[] = {
#if( CLI_ace_dispatcher_demo_hello_world == 1 ) 
	{"hello_world", "Run the hello world demo", ACE_CLI_SET_LEAF, .command.func=demo_hello_world_test},
#endif
#if( CLI_ace_dispatcher_demo_hello_world_system_dispatcher == 1 ) 
	{"hello_world_system_dispatcher", "Run the system dispatcher hello world demo", ACE_CLI_SET_LEAF, .command.func=demoHelloWorldUserTest},
#endif
#if( CLI_ace_dispatcher_demo_instances == 1 ) 
	{"instances", "Run the module instances demo", ACE_CLI_SET_LEAF, .command.func=demo_multi_instance_test},
#endif
#if( CLI_ace_dispatcher_demo_multiple == 1 ) 
	{"multiple", "Run the multi dispatcher demo", ACE_CLI_SET_LEAF, .command.func=dispatcherDemo_client_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_dispatcher_cli[] = {
#if( CLI_ace_dispatcher_debug == 1 ) 
	{"debug", "Dump dispatcher info", ACE_CLI_SET_LEAF, .command.func=aceDispatcher_debugCli},
#endif
	{"demo", "Dispatcher demo apps", ACE_CLI_SET_FUNC, .command.subCommands=ace_dispatcher_demo_cli},
#if( CLI_ace_dispatcher_set_verbosity == 1 ) 
	{"set_verbosity", "Set verbosity for dispatcher", ACE_CLI_SET_LEAF, .command.func=aceDispatcher_setVerbosityIdxCli},
#endif
#if( CLI_ace_dispatcher_tests == 1 ) 
	{"tests", "Dispatcher test", ACE_CLI_SET_LEAF, .command.func=aceDispatcher_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_dpk_bt_test_gattclient_cli[] = {
#if( CLI_ace_dpk_bt_test_gattclient_comp == 1 ) 
	{"comp", "compliance suite", ACE_CLI_SET_LEAF, .command.func=acehal_bt_gattclient_comp},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_connect == 1 ) 
	{"connect", "connect", ACE_CLI_SET_LEAF, .command.func=gattClient_connect},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_deinit == 1 ) 
	{"deinit", "Deinitialize GATT client", ACE_CLI_SET_LEAF, .command.func=IotTestBleHal_DeInit},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_disconnect == 1 ) 
	{"disconnect", "disconnect", ACE_CLI_SET_LEAF, .command.func=gattClient_disconnect},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_enablefilter == 1 ) 
	{"enablefilter", "scan filter", ACE_CLI_SET_LEAF, .command.func=IotTestBleHal_EnableFilter},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_getdb == 1 ) 
	{"getdb", "get database", ACE_CLI_SET_LEAF, .command.func=gattClient_getDb},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_init == 1 ) 
	{"init", "initialize GATT client", ACE_CLI_SET_LEAF, .command.func=gattClient_init},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_pair == 1 ) 
	{"pair", "pair", ACE_CLI_SET_LEAF, .command.func=gattClient_pair},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_readchar == 1 ) 
	{"readchar", "read characteristic", ACE_CLI_SET_LEAF, .command.func=gattClient_readChar},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_readdesc == 1 ) 
	{"readdesc", "read descriptor", ACE_CLI_SET_LEAF, .command.func=gattClient_readDesp},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_regnotify == 1 ) 
	{"regnotify", "register notifications", ACE_CLI_SET_LEAF, .command.func=gattClient_registerNotify},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_removebond == 1 ) 
	{"removebond", "remove bond", ACE_CLI_SET_LEAF, .command.func=gattClient_removeBond},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_rssi == 1 ) 
	{"rssi", "Read Remote Rssi", ACE_CLI_SET_LEAF, .command.func=IotTestBleHal_ReadRemoteRssi},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_scan == 1 ) 
	{"scan", "scan", ACE_CLI_SET_LEAF, .command.func=gattClient_scan},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_setupfilter == 1 ) 
	{"setupfilter", "scan filter", ACE_CLI_SET_LEAF, .command.func=IotTestBleHal_SetupFilter},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_stopscan == 1 ) 
	{"stopscan", "stop scan", ACE_CLI_SET_LEAF, .command.func=gattClient_stopscan},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_writechar == 1 ) 
	{"writechar", "write characteristic", ACE_CLI_SET_LEAF, .command.func=gattClient_writeChar},
#endif
#if( CLI_ace_dpk_bt_test_gattclient_writedesc == 1 ) 
	{"writedesc", "write descriptor", ACE_CLI_SET_LEAF, .command.func=gattClient_writeDesp},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_dpk_bt_test_cli[] = {
#if( CLI_ace_dpk_bt_test_addcharacteristic == 1 ) 
	{"addcharacteristic", "GATT Server - Add Characteristic", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxAddCharacteristic},
#endif
#if( CLI_ace_dpk_bt_test_adddescriptor == 1 ) 
	{"adddescriptor", "GATT Server - Add Descriptor", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxAddDescriptor},
#endif
#if( CLI_ace_dpk_bt_test_addincludedservice == 1 ) 
	{"addincludedservice", "GATT Server - Add Included Service", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxAddIncludedService},
#endif
#if( CLI_ace_dpk_bt_test_addservice == 1 ) 
	{"addservice", "GATT Server - Add Service", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxAddService},
#endif
#if( CLI_ace_dpk_bt_test_addserviceblob == 1 ) 
	{"addserviceblob", "GATT Server - Add Service Blob", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxAddServiceBlob},
#endif
#if( CLI_ace_dpk_bt_test_batchscancfgstorage == 1 ) 
	{"batchscancfgstorage", "BLE Adapter - Batchscan Cfg storage", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxBatchscanCfgStorage},
#endif
#if( CLI_ace_dpk_bt_test_batchscandisbatchscan == 1 ) 
	{"batchscandisbatchscan", "BLE Adapter - Batchscan Dis Batch Scan", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxBatchscanDisBatchScan},
#endif
#if( CLI_ace_dpk_bt_test_batchscanendbatchscan == 1 ) 
	{"batchscanendbatchscan", "BLE Adapter - Batchscan End Batch Scan", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxBatchscanEndBatchScan},
#endif
#if( CLI_ace_dpk_bt_test_batchscanreadreports == 1 ) 
	{"batchscanreadreports", "BLE Adapter - Batchscan Read Reports", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxBatchscanReadReports},
#endif
#if( CLI_ace_dpk_bt_test_bleadapterinit == 1 ) 
	{"bleadapterinit", "BLE Adapter - BLE Adapter Init", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxBleAdapterInit},
#endif
#if( CLI_ace_dpk_bt_test_btgetbluetoothinterface == 1 ) 
	{"btgetbluetoothinterface", "Get BT Manager Interface", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTGetBluetoothInterface},
#endif
#if( CLI_ace_dpk_bt_test_btmanagercleanup == 1 ) 
	{"btmanagercleanup", "BT Manager - BT Manager Cleanup", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxBtManagerCleanup},
#endif
#if( CLI_ace_dpk_bt_test_btmanagerinit == 1 ) 
	{"btmanagerinit", "BT Manager - BT Manager Init", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxBtManagerInit},
#endif
#if( CLI_ace_dpk_bt_test_cleareventqueue == 1 ) 
	{"cleareventqueue", "DTS test - Clear Event Queue", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_ClearEventQueue},
#endif
#if( CLI_ace_dpk_bt_test_clientconfiguremtu == 1 ) 
	{"clientconfiguremtu", "GATT Client - Configure MTU", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_gattclient_pxConfigureMtu},
#endif
#if( CLI_ace_dpk_bt_test_clientconnect == 1 ) 
	{"clientconnect", "GATT Client - Connect", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxConnect},
#endif
#if( CLI_ace_dpk_bt_test_clientdisconnect == 1 ) 
	{"clientdisconnect", "GATT Client - Disconnect", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_gattclient_pxDisconnect},
#endif
#if( CLI_ace_dpk_bt_test_configuremtu == 1 ) 
	{"configuremtu", "GATT Server - Configure MTU", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxConfigureMtu},
#endif
#if( CLI_ace_dpk_bt_test_connectioncallback == 1 ) 
	{"connectioncallback", "GATT Server - Connection Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTConnectionCallback},
#endif
#if( CLI_ace_dpk_bt_test_connparameterupdaterequest == 1 ) 
	{"connparameterupdaterequest", "BLE Adapter - Connection Parameter Update Request", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxConnParameterUpdateRequest},
#endif
#if( CLI_ace_dpk_bt_test_deleteservice == 1 ) 
	{"deleteservice", "GATT Server - Delete Service", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxDeleteService},
#endif
#if( CLI_ace_dpk_bt_test_disable == 1 ) 
	{"disable", "BT Manager - Disable", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxDisable},
#endif
#if( CLI_ace_dpk_bt_test_enable == 1 ) 
	{"enable", "BT Manager - Enable", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxEnable},
#endif
#if( CLI_ace_dpk_bt_test_executewrite == 1 ) 
	{"executewrite", "GATT Client - Execute Write", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxExecuteWrite},
#endif
#if( CLI_ace_dpk_bt_test_free == 1 ) 
	{"free", "DTS test - Free", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_Free},
#endif
	{"gattclient", "", ACE_CLI_SET_FUNC, .command.subCommands=ace_dpk_bt_test_gattclient_cli},
#if( CLI_ace_dpk_bt_test_gattclientinit == 1 ) 
	{"gattclientinit", "GATT Client - GATT Client Init", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxGattClientInit},
#endif
#if( CLI_ace_dpk_bt_test_gattserverinit == 1 ) 
	{"gattserverinit", "GATT Server - GATT Server Init", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxGattServerInit},
#endif
#if( CLI_ace_dpk_bt_test_getbleadapterproperty == 1 ) 
	{"getbleadapterproperty", "BLE Adapter - Get BLE Adapter Property", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxGetBleAdapterProperty},
#endif
#if( CLI_ace_dpk_bt_test_getdeviceproperty == 1 ) 
	{"getdeviceproperty", "BT Manager - Get Device Property", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxGetDeviceProperty},
#endif
#if( CLI_ace_dpk_bt_test_getgattclientinterface == 1 ) 
	{"getgattclientinterface", "BLE Adapter - Get GATT Client Interface", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_ppvGetGattClientInterface},
#endif
#if( CLI_ace_dpk_bt_test_getgattdb == 1 ) 
	{"getgattdb", "GATT Client - Get GATT DB", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxGetGattDb},
#endif
#if( CLI_ace_dpk_bt_test_getgattserverinterface == 1 ) 
	{"getgattserverinterface", "BLE Adapter - Get GATT Server Interface", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_ppvGetGattServerInterface},
#endif
#if( CLI_ace_dpk_bt_test_getleadapter == 1 ) 
	{"getleadapter", "BT Manager - Get LE Adapter", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxGetLeAdapter},
#endif
#if( CLI_ace_dpk_bt_test_mtuchangedcallback == 1 ) 
	{"mtuchangedcallback", "GATT Server - MtuChanged Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTMtuChangedCallback},
#endif
#if( CLI_ace_dpk_bt_test_multiadvdisable == 1 ) 
	{"multiadvdisable", "BLE Adapter - Multi-Adv Disable", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxMultiAdvDisable},
#endif
#if( CLI_ace_dpk_bt_test_multiadvenable == 1 ) 
	{"multiadvenable", "BLE Adapter - Multi-Adv Enable", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxMultiAdvEnable},
#endif
#if( CLI_ace_dpk_bt_test_multiadvsetinstdata == 1 ) 
	{"multiadvsetinstdata", "BLE Adapter - Multi-Adv Set Instance Data", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxMultiAdvSetInstData},
#endif
#if( CLI_ace_dpk_bt_test_multiadvupdate == 1 ) 
	{"multiadvupdate", "BLE Adapter - Multi-Adv Update", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxMultiAdvUpdate},
#endif
#if( CLI_ace_dpk_bt_test_notifycallback == 1 ) 
	{"notifycallback", "GATT Client - Notify Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTNotifyCallback},
#endif
#if( CLI_ace_dpk_bt_test_pair == 1 ) 
	{"pair", "BT Manager - Pair", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxPair},
#endif
#if( CLI_ace_dpk_bt_test_pairingstatechangedcallback == 1 ) 
	{"pairingstatechangedcallback", "BT Manager - PairingStateChanged Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTPairingStateChangedCallback},
#endif
#if( CLI_ace_dpk_bt_test_readcharacteristic == 1 ) 
	{"readcharacteristic", "GATT Client - Read Characteristic", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxReadCharacteristic},
#endif
#if( CLI_ace_dpk_bt_test_readdescriptor == 1 ) 
	{"readdescriptor", "GATT Client - Read Descriptor", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxReadDescriptor},
#endif
#if( CLI_ace_dpk_bt_test_readremoterssi == 1 ) 
	{"readremoterssi", "BLE Adapter - Read Remote Rssi", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxReadRemoteRssi},
#endif
#if( CLI_ace_dpk_bt_test_refresh == 1 ) 
	{"refresh", "GATT Client - Refresh", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxRefresh},
#endif
#if( CLI_ace_dpk_bt_test_registerbleapp == 1 ) 
	{"registerbleapp", "BLE Adapter - Register BLE APP", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxRegisterBleApp},
#endif
#if( CLI_ace_dpk_bt_test_registerclient == 1 ) 
	{"registerclient", "GATT Client - Register Client", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxRegisterClient},
#endif
#if( CLI_ace_dpk_bt_test_registerfornotification == 1 ) 
	{"registerfornotification", "GATT Client - Register For Notification", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxRegisterForNotification},
#endif
#if( CLI_ace_dpk_bt_test_registerserver == 1 ) 
	{"registerserver", "GATT Server - Register GATT Server", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxRegisterServer},
#endif
#if( CLI_ace_dpk_bt_test_removebond == 1 ) 
	{"removebond", "BT Manager - Remove Bond", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxRemoveBond},
#endif
#if( CLI_ace_dpk_bt_test_requestexecwritecallback == 1 ) 
	{"requestexecwritecallback", "GATT Server - RequestExecWrite Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTRequestExecWriteCallback},
#endif
#if( CLI_ace_dpk_bt_test_requestreadcallback == 1 ) 
	{"requestreadcallback", "GATT Server - RequestWrite Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTRequestReadCallback},
#endif
#if( CLI_ace_dpk_bt_test_requestwritecallback == 1 ) 
	{"requestwritecallback", "GATT Server - RequestWrite Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTRequestWriteCallback},
#endif
#if( CLI_ace_dpk_bt_test_scan == 1 ) 
	{"scan", "BLE Adapter - Scan", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxScan},
#endif
#if( CLI_ace_dpk_bt_test_scanfilteraddremove == 1 ) 
	{"scanfilteraddremove", "BLE Adapter - Scan Filter Add Remove", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxScanFilterAddRemove},
#endif
#if( CLI_ace_dpk_bt_test_scanfilterclear == 1 ) 
	{"scanfilterclear", "BLE Adapter - Scan Filter Clear", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxScanFilterClear},
#endif
#if( CLI_ace_dpk_bt_test_scanfilterenable == 1 ) 
	{"scanfilterenable", "BLE Adapter - Scan Filter Enable", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxScanFilterEnable},
#endif
#if( CLI_ace_dpk_bt_test_scanfilterparamsetup == 1 ) 
	{"scanfilterparamsetup", "BLE Adapter - Scan Filter Parameter Setup", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxScanFilterParamSetup},
#endif
#if( CLI_ace_dpk_bt_test_scanresultcallback == 1 ) 
	{"scanresultcallback", "BLE Adapter - ScanResult Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTScanResultCallback},
#endif
#if( CLI_ace_dpk_bt_test_searchservice == 1 ) 
	{"searchservice", "GATT Client - Search Service", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxSearchService},
#endif
#if( CLI_ace_dpk_bt_test_sendindication == 1 ) 
	{"sendindication", "GATT Server - Send Indication", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxSendIndication},
#endif
#if( CLI_ace_dpk_bt_test_sendresponse == 1 ) 
	{"sendresponse", "GATT Server - Send response", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxSendResponse},
#endif
#if( CLI_ace_dpk_bt_test_serverdisconnect == 1 ) 
	{"serverdisconnect", "GATT Server - GATT Server Disconnect", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxDisconnect},
#endif
#if( CLI_ace_dpk_bt_test_setadvdata == 1 ) 
	{"setadvdata", "BLE Adapter - Set Adv Data", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxSetAdvData},
#endif
#if( CLI_ace_dpk_bt_test_setdeviceproperty == 1 ) 
	{"setdeviceproperty", "BT Manager - Set Device Property", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxSetDeviceProperty},
#endif
#if( CLI_ace_dpk_bt_test_setscanparameters == 1 ) 
	{"setscanparameters", "BLE Adapter - Set Scan Parameters", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxSetScanParameters},
#endif
#if( CLI_ace_dpk_bt_test_setup == 1 ) 
	{"setup", "DTS test - Setup", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_Setup},
#endif
#if( CLI_ace_dpk_bt_test_sspreply == 1 ) 
	{"sspreply", "BT Manager - Ssp Reply", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxSspReply},
#endif
#if( CLI_ace_dpk_bt_test_ssprequestcallback == 1 ) 
	{"ssprequestcallback", "BT Manager - SspRequest Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTSspRequestCallback},
#endif
#if( CLI_ace_dpk_bt_test_ssprequestconfirmationcallback == 1 ) 
	{"ssprequestconfirmationcallback", "BT Manager - SspRequestConfirmation Callback", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_BTSspRequestConfirmationCallback},
#endif
#if( CLI_ace_dpk_bt_test_startadv == 1 ) 
	{"startadv", "BLE Adapter - Start Adv", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxStartAdv},
#endif
#if( CLI_ace_dpk_bt_test_startservice == 1 ) 
	{"startservice", "GATT Server - Start Service", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxStartService},
#endif
#if( CLI_ace_dpk_bt_test_stopadv == 1 ) 
	{"stopadv", "BLE Adapter - Stop Adv", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxStopAdv},
#endif
#if( CLI_ace_dpk_bt_test_stopservice == 1 ) 
	{"stopservice", "GATT Server - Stop Service", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxStopService},
#endif
#if( CLI_ace_dpk_bt_test_switch_callback == 1 ) 
	{"switch_callback", "DTS test - Switch set of Callback in use", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_switch_callback},
#endif
#if( CLI_ace_dpk_bt_test_testcommand == 1 ) 
	{"testcommand", "GATT Client - Test Command", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxTestCommand},
#endif
#if( CLI_ace_dpk_bt_test_unregisterbleapp == 1 ) 
	{"unregisterbleapp", "BLE Adapter - Unregister BLE APP", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxUnregisterBleApp},
#endif
#if( CLI_ace_dpk_bt_test_unregisterclient == 1 ) 
	{"unregisterclient", "GATT Client - Unregister Client", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxUnregisterClient},
#endif
#if( CLI_ace_dpk_bt_test_unregisterfornotification == 1 ) 
	{"unregisterfornotification", "GATT Client - Unregister For Notification", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxUnregisterForNotification},
#endif
#if( CLI_ace_dpk_bt_test_unregisterserver == 1 ) 
	{"unregisterserver", "GATT Server - Unregister GATT Server", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxUnregisterServer},
#endif
#if( CLI_ace_dpk_bt_test_writecharacteristic == 1 ) 
	{"writecharacteristic", "GATT Client - Write Characteristic", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxWriteCharacteristic},
#endif
#if( CLI_ace_dpk_bt_test_writedescriptor == 1 ) 
	{"writedescriptor", "GATT Client - Write Descriptor", ACE_CLI_SET_LEAF, .command.func=acehal_bt_tests_cli_pxWriteDescriptor},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_dpk_bt_cli[] = {
	{"test", "", ACE_CLI_SET_FUNC, .command.subCommands=ace_dpk_bt_test_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_dpk_cli[] = {
	{"bt", "Bluetooth HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_dpk_bt_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_fw_cli_cli[] = {
#if( CLI_ace_fw_cli_demo == 1 ) 
	{"demo", "ACE CLI demo commands", ACE_CLI_SET_LEAF, .command.func=cli_demo_module_main},
#endif
#if( CLI_ace_fw_cli_gem == 1 ) 
	{"gem", "ACE CLI override demo commands", ACE_CLI_SET_LEAF, .command.func=cli_override_demo_main},
#endif
#if( CLI_ace_fw_cli_test == 1 ) 
	{"test", "ACE CLI test command", ACE_CLI_SET_LEAF, .command.func=cli_tests_functional_main},
#endif
#if( CLI_ace_fw_cli_test_arg == 1 ) 
	{"test_arg", "ACE CLI arg test command", ACE_CLI_SET_LEAF, .command.func=cli_tests_check_args},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_fw_eventmgr_cli[] = {
#if( CLI_ace_fw_eventmgr_cli == 1 ) 
	{"cli", "ACE EventMgr CLI", ACE_CLI_SET_LEAF, .command.func=aceEventMgrCli_entry},
#endif
#if( CLI_ace_fw_eventmgr_demo == 1 ) 
	{"demo", "ACE EventMgr Demo", ACE_CLI_SET_LEAF, .command.func=aceEventMgrDemo_entry},
#endif
#if( CLI_ace_fw_eventmgr_tests == 1 ) 
	{"tests", "ACE EventMgr Integration Tests", ACE_CLI_SET_LEAF, .command.func=eventmgr_tests_entry},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_fw_cli[] = {
	{"cli", "ACE CLI module internal commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_fw_cli_cli},
	{"eventmgr", "ACE EventMgr", ACE_CLI_SET_FUNC, .command.subCommands=ace_fw_eventmgr_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_device_info_cli[] = {
#if( CLI_ace_hal_device_info_cli == 1 ) 
	{"cli", "Device Info Hal Cli", ACE_CLI_SET_LEAF, .command.func=device_info_cli_main},
#endif
#if( CLI_ace_hal_device_info_test == 1 ) 
	{"test", "Device Info Hal test", ACE_CLI_SET_LEAF, .command.func=acehal_device_info_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_dha_cli[] = {
#if( CLI_ace_hal_dha_get_field == 1 ) 
#ifndef ACE_HAL_DHA_GET_FIELD_STACK_SIZE
#define ACE_HAL_DHA_GET_FIELD_STACK_SIZE (12 * 1024)
#endif
	{"get_field", "Get supported data fields - DSN, CSR, CERTIFICATE_CHAIN", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=aceDhaHal_get_field_cli, .stack_size_kb = ROUND_UP_TO_KB(ACE_HAL_DHA_GET_FIELD_STACK_SIZE)},
#endif
#if( CLI_ace_hal_dha_get_pub == 1 ) 
#ifndef ACE_HAL_DHA_GET_PUB_STACK_SIZE
#define ACE_HAL_DHA_GET_PUB_STACK_SIZE (12 * 1024)
#endif
	{"get_pub", "Generate Public key from DHA Key Pair", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=aceDhaHal_get_dha_key_public_cli, .stack_size_kb = ROUND_UP_TO_KB(ACE_HAL_DHA_GET_PUB_STACK_SIZE)},
#endif
#if( CLI_ace_hal_dha_key_gen == 1 ) 
#ifndef ACE_HAL_DHA_KEY_GEN_STACK_SIZE
#define ACE_HAL_DHA_KEY_GEN_STACK_SIZE (6 * 1024)
#endif
	{"key_gen", "Generate DHA Key Pair", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=aceDhaHal_generate_dha_key_cli, .stack_size_kb = ROUND_UP_TO_KB(ACE_HAL_DHA_KEY_GEN_STACK_SIZE)},
#endif
#if( CLI_ace_hal_dha_set_cert == 1 ) 
#ifndef ACE_HAL_DHA_SET_CERT_STACK_SIZE
#define ACE_HAL_DHA_SET_CERT_STACK_SIZE (12 * 1024)
#endif
	{"set_cert", "Set certificate chain", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=aceDhaHal_set_certificate_cli, .stack_size_kb = ROUND_UP_TO_KB(ACE_HAL_DHA_SET_CERT_STACK_SIZE)},
#endif
#if( CLI_ace_hal_dha_sign == 1 ) 
#ifndef ACE_HAL_DHA_SIGN_STACK_SIZE
#define ACE_HAL_DHA_SIGN_STACK_SIZE (12 * 1024)
#endif
	{"sign", "Sign SHA256 Digest of a message", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=aceDhaHal_sign_data_cli, .stack_size_kb = ROUND_UP_TO_KB(ACE_HAL_DHA_SIGN_STACK_SIZE)},
#endif
#if( CLI_ace_hal_dha_test == 1 ) 
#ifndef ACE_HAL_DHA_TEST_STACK_SIZE
#define ACE_HAL_DHA_TEST_STACK_SIZE (12 * 1024)
#endif
	{"test", "DHA Hal test", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=acehal_dha_tests_main, .stack_size_kb = ROUND_UP_TO_KB(ACE_HAL_DHA_TEST_STACK_SIZE)},
#endif
#if( CLI_ace_hal_dha_verify == 1 ) 
#ifndef ACE_HAL_DHA_VERIFY_STACK_SIZE
#define ACE_HAL_DHA_VERIFY_STACK_SIZE (12 * 1024)
#endif
	{"verify", "Verify SHA256 Digest of a message", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=aceDhaHal_verify_data_cli, .stack_size_kb = ROUND_UP_TO_KB(ACE_HAL_DHA_VERIFY_STACK_SIZE)},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_factory_reset_cli[] = {
#if( CLI_ace_hal_factory_reset_start == 1 ) 
	{"start", "Factory reset HAL commands", ACE_CLI_SET_LEAF, .command.func=factory_reset_hal_helper},
#endif
#if( CLI_ace_hal_factory_reset_test == 1 ) 
	{"test", "Factory reset HAL tests", ACE_CLI_SET_LEAF, .command.func=test_hal_factory_reset_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_kvs_cli[] = {
#if( CLI_ace_hal_kvs_cli == 1 ) 
	{"cli", "KVS Hal Cli", ACE_CLI_SET_LEAF, .command.func=kvs_cli_main},
#endif
#if( CLI_ace_hal_kvs_returncode == 1 ) 
	{"returncode", "KVS HAL return code test", ACE_CLI_SET_LEAF, .command.func=acehal_kv_storage_returncodes_main},
#endif
#if( CLI_ace_hal_kvs_test == 1 ) 
	{"test", "KVS HAL Integration test", ACE_CLI_SET_LEAF, .command.func=acehal_kv_storage_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_log_cli[] = {
#if( CLI_ace_hal_log_test == 1 ) 
	{"test", "LOG Hal test", ACE_CLI_SET_LEAF, .command.func=acehal_log_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_wifi_cli[] = {
#if( CLI_ace_hal_wifi_test == 1 ) 
	{"test", "Start wifi hal integration test", ACE_CLI_SET_LEAF, .command.func=acehal_wifi_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_hal_cli[] = {
	{"device_info", "Device Info HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_device_info_cli},
	{"dha", "DHA HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_dha_cli},
	{"factory_reset", "Factory reset HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_factory_reset_cli},
	{"kvs", "KVS HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_kvs_cli},
	{"log", "LOG HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_log_cli},
#if( CLI_ace_hal_wifi == 1 ) 
	{"wifi", "WiFi HAL commands", ACE_CLI_SET_LEAF, .command.func=halWifiCli_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_ace_conn_cli[] = {
#if( CLI_ace_mw_ace_conn_sample_http_post == 1 ) 
	{"sample_http_post", "sample http post", ACE_CLI_SET_LEAF, .command.func=aceConnCli_sample_http_post},
#endif
#if( CLI_ace_mw_ace_conn_test_debug_cmd == 1 ) 
	{"test_debug_cmd", "execute debug command assert/config_dump/nullptr", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_debug_cmd},
#endif
#if( CLI_ace_mw_ace_conn_test_integration == 1 ) 
	{"test_integration", "ACM integration tests", ACE_CLI_SET_LEAF, .command.func=ace_acm_tests_main},
#endif
#if( CLI_ace_mw_ace_conn_test_large_get == 1 ) 
	{"test_large_get", "test large file get using HTTP get", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_large_get},
#endif
#if( CLI_ace_mw_ace_conn_test_lws == 1 ) 
	{"test_lws", "test LWS http get without ACM", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_lws},
#endif
#if( CLI_ace_mw_ace_conn_test_multi_tls_get == 1 ) 
	{"test_multi_tls_get", "test multiple https get", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_multi_tls_get},
#endif
#if( CLI_ace_mw_ace_conn_test_simple_get == 1 ) 
	{"test_simple_get", "test http get", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_simple_get},
#endif
#if( CLI_ace_mw_ace_conn_test_simple_get_cancel == 1 ) 
	{"test_simple_get_cancel", "test http get cancel", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_simple_get_cancel},
#endif
#if( CLI_ace_mw_ace_conn_test_simple_get_large_header == 1 ) 
	{"test_simple_get_large_header", "test http get large header", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_simple_get_large_header},
#endif
#if( CLI_ace_mw_ace_conn_test_simple_get_rc == 1 ) 
	{"test_simple_get_rc", "test http get return code", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_simple_get_rc},
#endif
#if( CLI_ace_mw_ace_conn_test_simple_get_retry == 1 ) 
	{"test_simple_get_retry", "test http get retry", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_simple_get_retry},
#endif
#if( CLI_ace_mw_ace_conn_test_simple_get_timeout == 1 ) 
	{"test_simple_get_timeout", "test http get timeout", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_simple_get_timeout},
#endif
#if( CLI_ace_mw_ace_conn_test_simple_post == 1 ) 
	{"test_simple_post", "test http post", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_simple_post},
#endif
#if( CLI_ace_mw_ace_conn_test_ss == 1 ) 
	{"test_ss", "test secure stream", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_ss},
#endif
#if( CLI_ace_mw_ace_conn_test_ss_alexa == 1 ) 
	{"test_ss_alexa", "test secure stream alexa connection", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_ss_alexa},
#endif
#if( CLI_ace_mw_ace_conn_test_ss_mqtt == 1 ) 
	{"test_ss_mqtt", "test MQTT secure stream", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_ss_mqtt},
#endif
#if( CLI_ace_mw_ace_conn_test_ss_proxy == 1 ) 
	{"test_ss_proxy", "test secure stream proxy client connection", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_ss_proxy},
#endif
#if( CLI_ace_mw_ace_conn_test_time == 1 ) 
	{"test_time", "test platform time() api", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_time},
#endif
#if( CLI_ace_mw_ace_conn_test_tls_get == 1 ) 
	{"test_tls_get", "test https get", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_tls_get},
#endif
#if( CLI_ace_mw_ace_conn_test_url == 1 ) 
	{"test_url", "execute http/s URL", ACE_CLI_SET_LEAF, .command.func=aceConnCli_test_url},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_bt_ble_cli[] = {
#if( CLI_ace_mw_bt_ble_addchar == 1 ) 
	{"addchar", "Add Characteristics to Gatt Server", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleAddCharacteristics},
#endif
#if( CLI_ace_mw_bt_ble_addchardesp == 1 ) 
	{"addchardesp", "Add Characteristics with Descriptor to Gatt Server", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleAddCharacteristicsWithDesc},
#endif
#if( CLI_ace_mw_bt_ble_addinclservice == 1 ) 
	{"addinclservice", "Add Included Service to Gatt Server", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleAddIncludedService},
#endif
#if( CLI_ace_mw_bt_ble_addservice == 1 ) 
	{"addservice", "Add Gatt Service", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleAddService},
#endif
#if( CLI_ace_mw_bt_ble_connCb == 1 ) 
	{"connCb", "check connection cb received", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleCheckConnCbRcvd},
#endif
#if( CLI_ace_mw_bt_ble_connPrioReq == 1 ) 
	{"connPrioReq", "connection priority change request", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleConnPrioReq},
#endif
#if( CLI_ace_mw_bt_ble_createservice == 1 ) 
	{"createservice", "Create Gatt Service", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleCreateService},
#endif
#if( CLI_ace_mw_bt_ble_deregisterbeacon == 1 ) 
	{"deregisterbeacon", "Deregister Beacon Client", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleDeregisterBeaconClient},
#endif
#if( CLI_ace_mw_bt_ble_deregisterserver == 1 ) 
	{"deregisterserver", "Deregister Gatt Server", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleDeregisterGattServer},
#endif
#if( CLI_ace_mw_bt_ble_getMtu == 1 ) 
	{"getMtu", "mtu get request", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleGetMtuReq},
#endif
#if( CLI_ace_mw_bt_ble_readCb == 1 ) 
	{"readCb", "check read request cb received", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleCheckReadReqCbRcvd},
#endif
#if( CLI_ace_mw_bt_ble_registerbeacon == 1 ) 
	{"registerbeacon", "Register Beacon Client", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleRegisterBeaconClient},
#endif
#if( CLI_ace_mw_bt_ble_registerserver == 1 ) 
	{"registerserver", "Register Gatt Server", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleRegisterGattServer},
#endif
#if( CLI_ace_mw_bt_ble_sendNotify == 1 ) 
	{"sendNotify", "sendNotification", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleSendNotification},
#endif
#if( CLI_ace_mw_bt_ble_sendResponse == 1 ) 
	{"sendResponse", "sendResponse", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleSendResponse},
#endif
#if( CLI_ace_mw_bt_ble_startbeacon == 1 ) 
	{"startbeacon", "Start beaconing", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleStartBeacon},
#endif
#if( CLI_ace_mw_bt_ble_stopbeacon == 1 ) 
	{"stopbeacon", "Stop beaconing", ACE_CLI_SET_LEAF, .command.func=aceBtCli_bleStopBeacon},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_bt_cli[] = {
	{"ble", "BLE interface", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_bt_ble_cli},
#if( CLI_ace_mw_bt_deinit == 1 ) 
	{"deinit", "Deinitialize bluetooth", ACE_CLI_SET_LEAF, .command.func=aceBtCli_deinit},
#endif
#if( CLI_ace_mw_bt_disable == 1 ) 
	{"disable", "disables bluetooth", ACE_CLI_SET_LEAF, .command.func=aceBtCli_disable},
#endif
#if( CLI_ace_mw_bt_enable == 1 ) 
	{"enable", "enables bluetooth", ACE_CLI_SET_LEAF, .command.func=aceBtCli_enable},
#endif
#if( CLI_ace_mw_bt_getadaptername == 1 ) 
	{"getadaptername", "gets adapter name of bluetooth device", ACE_CLI_SET_LEAF, .command.func=aceBtCli_getAdapterName},
#endif
#if( CLI_ace_mw_bt_getadapterprop == 1 ) 
	{"getadapterprop", "gets adapter properties of bluetooth device", ACE_CLI_SET_LEAF, .command.func=aceBtCli_getAdapterProp},
#endif
#if( CLI_ace_mw_bt_getsession == 1 ) 
	{"getsession", "gets bluetooth session handle", ACE_CLI_SET_LEAF, .command.func=aceBtCli_getBtSession},
#endif
#if( CLI_ace_mw_bt_init == 1 ) 
	{"init", "Initialize bluetooth", ACE_CLI_SET_LEAF, .command.func=aceBtCli_init},
#endif
#if( CLI_ace_mw_bt_radiostate == 1 ) 
	{"radiostate", "Retrieves the Adapter state", ACE_CLI_SET_LEAF, .command.func=aceBtCli_getRadioState},
#endif
#if( CLI_ace_mw_bt_setadaptername == 1 ) 
	{"setadaptername", "sets adapter name of bluetooth device", ACE_CLI_SET_LEAF, .command.func=aceBtCli_setAdapterName},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_logging_cli[] = {
#if( CLI_ace_mw_logging_cli == 1 ) 
	{"cli", "cli cmds for logging", ACE_CLI_SET_LEAF, .command.func=ace_log_cli_main},
#endif
#if( CLI_ace_mw_logging_test == 1 ) 
	{"test", "Test Ace Logging", ACE_CLI_SET_LEAF, .command.func=acelog_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_test_maplite_cli[] = {
#if( CLI_ace_mw_test_maplite_map == 1 ) 
#ifndef ACE_MW_TEST_MAPLITE_MAP_STACK_SIZE
#define ACE_MW_TEST_MAPLITE_MAP_STACK_SIZE (8 * 1024)
#endif
	{"map", "ACS Map integration test commands", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=map_test_cli_main, .stack_size_kb = ROUND_UP_TO_KB(ACE_MW_TEST_MAPLITE_MAP_STACK_SIZE)},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_test_cli[] = {
	{"maplite", "ACS Maplite test commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_test_maplite_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_wifi_cli_cli[] = {
#if( CLI_ace_mw_wifi_cli_add_network == 1 ) 
	{"add_network", "ssid=<ssid> [psk=<psk> | wep0=<wep0>\n [wep1=<wep1> wep2=<wep2>\n wep3=<wep3>] wepIdx=<wepIdx>]\n [auth=wpa|wpa2]\n [hidden=<0 | 1>]\n - create a profile", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_addNetwork},
#endif
#if( CLI_ace_mw_wifi_cli_connect == 1 ) 
	{"connect", "<ssid> [open|wep|wpa|wpa2|eap]\n - connect to <ssid> network", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_connect},
#endif
#if( CLI_ace_mw_wifi_cli_create_ap == 1 ) 
	{"create_ap", "[ssid=<ssid> [psk=<psk>] [freq=<freq>]]\n - create soft AP (create default w/ no args)", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_createAP},
#endif
#if( CLI_ace_mw_wifi_cli_disable_all == 1 ) 
	{"disable_all", "- disable all networks", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_disableNetworks},
#endif
#if( CLI_ace_mw_wifi_cli_disable_nat == 1 ) 
	{"disable_nat", "- disable NAT", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_disableNAT},
#endif
#if( CLI_ace_mw_wifi_cli_disable_tcp == 1 ) 
	{"disable_tcp", "- disable TCP tunnel", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_disableTcpTunnel},
#endif
#if( CLI_ace_mw_wifi_cli_disconnect == 1 ) 
	{"disconnect", "- disconnect current network", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_disconnect},
#endif
#if( CLI_ace_mw_wifi_cli_enable_all == 1 ) 
	{"enable_all", "- enable all networks", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_enableNetworks},
#endif
#if( CLI_ace_mw_wifi_cli_enable_nat == 1 ) 
	{"enable_nat", "- enable NAT", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_enableNAT},
#endif
#if( CLI_ace_mw_wifi_cli_enable_tcp == 1 ) 
	{"enable_tcp", "<srcIP> <srcPort> <destIP> <destPort>\n - enable TCP tunnel", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_enableTcpTunnel},
#endif
#if( CLI_ace_mw_wifi_cli_eval_captive == 1 ) 
	{"eval_captive", "- evaluate captive portal", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_evaluateCaptive},
#endif
#if( CLI_ace_mw_wifi_cli_get_cap_state == 1 ) 
	{"get_cap_state", "- get captive portal state", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getCaptivePortalState},
#endif
#if( CLI_ace_mw_wifi_cli_get_capability == 1 ) 
	{"get_capability", "- get Capability info", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getCapabilityInfo},
#endif
#if( CLI_ace_mw_wifi_cli_get_config == 1 ) 
	{"get_config", "- get configured networks", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getConfiguredNetworks},
#endif
#if( CLI_ace_mw_wifi_cli_get_conn_info == 1 ) 
	{"get_conn_info", "- get connection info", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getConnectionInfo},
#endif
#if( CLI_ace_mw_wifi_cli_get_country == 1 ) 
	{"get_country", "- get current country code", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getCountryCode},
#endif
#if( CLI_ace_mw_wifi_cli_get_detailed_scan_results == 1 ) 
	{"get_detailed_scan_results", "- get detailed scan results", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getDetailedScanResults},
#endif
#if( CLI_ace_mw_wifi_cli_get_ip_info == 1 ) 
	{"get_ip_info", "- get IP info", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getIpInfo},
#endif
#if( CLI_ace_mw_wifi_cli_get_loglevel == 1 ) 
	{"get_loglevel", "- get ace wifi log level", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getLogLevel},
#endif
#if( CLI_ace_mw_wifi_cli_get_mac == 1 ) 
	{"get_mac", "- get mac_address", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getMacAddress},
#endif
#if( CLI_ace_mw_wifi_cli_get_md5 == 1 ) 
	{"get_md5", "ssid=<ssid> len=<len> - convert to md5 hash from the input ssid", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getMd5},
#endif
#if( CLI_ace_mw_wifi_cli_get_net_state == 1 ) 
	{"get_net_state", "- get network state", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getNetworkState},
#endif
#if( CLI_ace_mw_wifi_cli_get_scan_results == 1 ) 
	{"get_scan_results", "- get scan results", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getScanResults},
#endif
#if( CLI_ace_mw_wifi_cli_get_statistic == 1 ) 
	{"get_statistic", "- get Statistic info", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_getStatisticInfo},
#endif
#if( CLI_ace_mw_wifi_cli_get_test_config == 1 ) 
	{"get_test_config", "- Get default integration test config", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_runGetDefaultIntegrationTestConfig},
#endif
#if( CLI_ace_mw_wifi_cli_get_wifi_ready == 1 ) 
	{"get_wifi_ready", "- get is wifi ready", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_isWifiReady},
#endif
#if( CLI_ace_mw_wifi_cli_iperf == 1 ) 
	{"iperf", "- Usage: iperf [-s|-c] [options]\niperf [-h] for help", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_runIperf},
#endif
#if( CLI_ace_mw_wifi_cli_mscan_test == 1 ) 
	{"mscan_test", "<num> - Multiple scan and result merge test", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_mscanTest},
#endif
#if( CLI_ace_mw_wifi_cli_ping == 1 ) 
	{"ping", "- <x.x.x.x> [<num> [<length> [<interval_ms>]]]\n- ping IP address", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_ping},
#endif
#if( CLI_ace_mw_wifi_cli_remove_ap == 1 ) 
	{"remove_ap", "- remove current soft AP", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_removeAP},
#endif
#if( CLI_ace_mw_wifi_cli_remove_network == 1 ) 
	{"remove_network", "<ssid> [open|wep|wpa|wpa2|eap]\n - delete a profile", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_removeNetwork},
#endif
#if( CLI_ace_mw_wifi_cli_save_config == 1 ) 
	{"save_config", "- save config", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_saveConfig},
#endif
#if( CLI_ace_mw_wifi_cli_scan == 1 ) 
	{"scan", "- perform a scan", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_scan},
#endif
#if( CLI_ace_mw_wifi_cli_set_country == 1 ) 
	{"set_country", "<code>\n - set country code to <code>", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_setCountryCode},
#endif
#if( CLI_ace_mw_wifi_cli_set_loglevel == 1 ) 
	{"set_loglevel", "- set ace wifi log level", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_setLogLevel},
#endif
#if( CLI_ace_mw_wifi_cli_set_test_config == 1 ) 
	{"set_test_config", "- Set integration test config", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_runSetIntegrationTestConfig},
#endif
#if( CLI_ace_mw_wifi_cli_test_integration == 1 ) 
	{"test_integration", "- run integration test", ACE_CLI_SET_LEAF, .command.func=aceWifiCli_runIntegrationTest},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_mw_cli[] = {
	{"ace_conn", "ACE Connectivity Manager commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_ace_conn_cli},
	{"bt", "ACE BT commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_bt_cli},
#if( CLI_ace_mw_factory_reset == 1 ) 
	{"factory_reset", "Factory Reset CLI commands", ACE_CLI_SET_LEAF, .command.func=factory_reset_main},
#endif
#if( CLI_ace_mw_ffs == 1 ) 
#ifndef ACE_MW_FFS_STACK_SIZE
#define ACE_MW_FFS_STACK_SIZE (CONFIG_ACE_FFS_CLI_STACK_SIZE * 1024)
#endif
	{"ffs", "ACS FFS Provisionable commands", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=ffs_cli_entry, .stack_size_kb = ROUND_UP_TO_KB(ACE_MW_FFS_STACK_SIZE)},
#endif
	{"logging", "logging cli", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_logging_cli},
#if( CLI_ace_mw_maplite == 1 ) 
	{"maplite", "ACS Map commands", ACE_CLI_SET_LEAF, .command.func=device_register_map_cli_main},
#endif
	{"test", "ACS Test commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_test_cli},
	{"wifi_cli", "ACE WIFI commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_wifi_cli_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_alloc_cli[] = {
#if( CLI_ace_osal_alloc_test == 1 ) 
	{"test", "Test ACE OSAL Alloc", ACE_CLI_SET_LEAF, .command.func=osal_alloc_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_atomic_cli[] = {
#if( CLI_ace_osal_atomic_test == 1 ) 
	{"test", "Test ACE OSAL Atomic", ACE_CLI_SET_LEAF, .command.func=osal_atomic_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_ipmutex_cli[] = {
#if( CLI_ace_osal_ipmutex_test == 1 ) 
	{"test", "Test ACE OSAL IpMutex", ACE_CLI_SET_LEAF, .command.func=osal_IpMutex_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_mp_cli[] = {
#if( CLI_ace_osal_mp_test == 1 ) 
	{"test", "Test ACE OSAL Memory pool", ACE_CLI_SET_LEAF, .command.func=osal_mp_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_mutex_cli[] = {
#if( CLI_ace_osal_mutex_test == 1 ) 
	{"test", "Test ACE OSAL Mutex", ACE_CLI_SET_LEAF, .command.func=osal_mutex_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_queue_cli[] = {
#if( CLI_ace_osal_queue_test == 1 ) 
#ifndef ACE_OSAL_QUEUE_TEST_STACK_SIZE
#define ACE_OSAL_QUEUE_TEST_STACK_SIZE (9 * 1024)
#endif
	{"test", "Test ACE OSAL Message Queue", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=osal_message_queue_tests_main, .stack_size_kb = ROUND_UP_TO_KB(ACE_OSAL_QUEUE_TEST_STACK_SIZE)},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_rand_cli[] = {
#if( CLI_ace_osal_rand_get == 1 ) 
	{"get", "Get random data", ACE_CLI_SET_LEAF, .command.func=aceRand_cli_main},
#endif
#if( CLI_ace_osal_rand_test == 1 ) 
#ifndef ACE_OSAL_RAND_TEST_STACK_SIZE
#define ACE_OSAL_RAND_TEST_STACK_SIZE (8 * 1024)
#endif
	{"test", "Test ACE OSAL Rand", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=osal_rand_tests_main, .stack_size_kb = ROUND_UP_TO_KB(ACE_OSAL_RAND_TEST_STACK_SIZE)},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_semaphore_cli[] = {
#if( CLI_ace_osal_semaphore_test == 1 ) 
#ifndef ACE_OSAL_SEMAPHORE_TEST_STACK_SIZE
#define ACE_OSAL_SEMAPHORE_TEST_STACK_SIZE (9 * 1024)
#endif
	{"test", "Test ACE OSAL Semaphore", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=osal_semaphore_tests_main, .stack_size_kb = ROUND_UP_TO_KB(ACE_OSAL_SEMAPHORE_TEST_STACK_SIZE)},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_shmem_cli[] = {
#if( CLI_ace_osal_shmem_cli == 1 ) 
	{"cli", "ACE OSAL Shared Memory Feature CLIs", ACE_CLI_SET_LEAF, .command.func=aceShmem_cli_main},
#endif
#if( CLI_ace_osal_shmem_test == 1 ) 
	{"test", "Test ACE OSAL Shared Memory", ACE_CLI_SET_LEAF, .command.func=osal_shmem_tests_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_thread_cli[] = {
#if( CLI_ace_osal_thread_test == 1 ) 
#ifndef ACE_OSAL_THREAD_TEST_STACK_SIZE
#define ACE_OSAL_THREAD_TEST_STACK_SIZE (8 * 1024)
#endif
	{"test", "Test ACE OSAL Thread", ACE_CLI_SET_LEAF | ACE_CLI_SET_EXEC_SPAWN, .command.func=osal_thread_tests_main, .stack_size_kb = ROUND_UP_TO_KB(ACE_OSAL_THREAD_TEST_STACK_SIZE)},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_time_cli[] = {
#if( CLI_ace_osal_time_test == 1 ) 
	{"test", "Test ACE OSAL Time", ACE_CLI_SET_LEAF, .command.func=osal_time_tests_main},
#endif
#if( CLI_ace_osal_time_timer_one_shot == 1 ) 
	{"timer_one_shot", "Start a one-shot alarm timer", ACE_CLI_SET_LEAF, .command.func=aceTime_cli_main},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_osal_cli[] = {
	{"alloc", "ACE OSAL Alloc commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_alloc_cli},
	{"atomic", "ACE OSAL Atomic commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_atomic_cli},
	{"ipmutex", "ACE OSAL IpMutex commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_ipmutex_cli},
	{"mp", "ACE OSAL Memory Pool commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_mp_cli},
	{"mutex", "ACE OSAL Mutex commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_mutex_cli},
	{"queue", "ACE OSAL Message Queue commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_queue_cli},
	{"rand", "ACE OSAL Rand commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_rand_cli},
	{"semaphore", "ACE OSAL Semaphore commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_semaphore_cli},
	{"shmem", "ACE OSAL Shared Memory commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_shmem_cli},
	{"thread", "ACE OSAL Thread commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_thread_cli},
	{"time", "ACE OSAL Time commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_time_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_tools_sys_cli[] = {
#if( CLI_ace_tools_sys_heap == 1 ) 
	{"heap", "Show heap stats", ACE_CLI_SET_LEAF, .command.func=ace_sys_heap_stats_cli},
#endif
#if( CLI_ace_tools_sys_task == 1 ) 
	{"task", "Show task stats", ACE_CLI_SET_LEAF, .command.func=ace_sys_task_stats_cli},
#endif
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_tools_cli[] = {
	{"sys", "ACE Sys Toolbox commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_tools_sys_cli},
	ACE_CLI_NULL_MODULE
};

const aceCli_moduleCmd_t ace_cli[] = {
#if( CLI_ace_att == 1 ) 
	{"att", "ATT", ACE_CLI_SET_LEAF, .command.func=ace_att_cli},
#endif
	{"dispatcher", "ACE Dispatcher CLIs", ACE_CLI_SET_FUNC, .command.subCommands=ace_dispatcher_cli},
	{"dpk", "ACE dpk commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_dpk_cli},
	{"fw", "ACE framework commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_fw_cli},
	{"hal", "ACS HAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_hal_cli},
	{"mw", "ACE middleware commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_mw_cli},
	{"osal", "ACE OSAL commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_osal_cli},
	{"tools", "ACE tools commands", ACE_CLI_SET_FUNC, .command.subCommands=ace_tools_cli},
	ACE_CLI_NULL_MODULE
};

