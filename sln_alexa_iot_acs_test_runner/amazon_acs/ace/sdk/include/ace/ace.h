/*
 * Copyright 2018-2020 Amazon.com, Inc. or its affiliates. All rights reserved.
 *
 * AMAZON PROPRIETARY/CONFIDENTIAL
 *
 * You may not use this file except in compliance with the terms and
 * conditions set forth in the accompanying LICENSE.TXT file.
 *
 * THESE MATERIALS ARE PROVIDED ON AN "AS IS" BASIS. AMAZON SPECIFICALLY
 * DISCLAIMS, WITH RESPECT TO THESE MATERIALS, ALL WARRANTIES, EXPRESS,
 * IMPLIED, OR STATUTORY, INCLUDING THE IMPLIED WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT.
 */
/**
 * @file ace.h
 * @brief Initialization of ACE framework components.
 *
 * This file provides access to ACE OSAL headers and APIs needed for
 * initializing ACE framework components.
 * @addtogroup ACE_INIT_API
 * @{
 */
#ifndef ACE_DOT_H
#define ACE_DOT_H

#include <ace/ace_config.h>
#include <ace/osal_common.h>
#include <ace/os_specific.h>
#include <ace/osal_mp.h>
#include <ace/osal_mq.h>
#include <ace/osal_mutex.h>
#include <ace/osal_rand.h>
#include <ace/osal_semaphore.h>
#include <ace/osal_shmem.h>
#include <ace/osal_threads.h>
#include <ace/osal_time.h>
#include <ace/osal_ip_mutex.h>
#include <ace/osal_alloc.h>
#include <ace/osal_atomic.h>
#include <ace/ace_user_config.h>

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @brief   Initialize ACE framework components, user config provided.
 *
 * @details Framework components along with the DPK provides a consistent
 *          runtime environment for ACE components irrespective of the
 *          underlying OS such as RTOS, Linux, Android. This function
 *          initializes ACE framework components along with certain parts
 *          of the OSAL. The user may customize certain behaviors defined in
 *          @ref aceUserConfig_config_t struct defined in @ref
 *          ace_user_config.h.
 *
 *          On Linux and similar OSes where executables do not share the same
 *          address space, ACE Lifecycle Management compiles each service into
 *          a separate executable. Here, initializing the framework components
 *          is handled by automatically without end user intervention. However,
 *          when linking ACE libraires into end user executables, the user is
 *          expected to manually call this function before accessing any ACE
 *          functionality. On RTOS, all ACE components are compiled into the
 *          same address space and here too initializing framework components
 *          is handled internally while the end user is required to call
 *          @ref ace_main.
 *
 * @param[in] ace_config Populated @ref aceUserConfig_config_t struct provided
 *                       by product.
 *
 * @return ACE_STATUS_OK on success, else error code.
 */
int ace_initWithConfig(aceUserConfig_config_t* ace_config);

/**
 * @brief   Initialize ACE framework components, no user config provided.
 *
 * @details A simple wrapper around @ref ace_initWithConfig with NULL arg.
 *
 * @return  ACE_STATUS_OK on success, else error code.
 */
int ace_init(void);

/**
 * @brief   Initialize ACE Services, user config provided.
 *
 * @details This function is autogenerated by ACE Lifecycle Management
 *          system to facilitate the launch of ACE services on RTOS.
 * @note    This function automatically calls @ref ace_initWithConfig() under
 *          the hood and users should not call it separately.
 *
 * @param[in] ace_config Populated @ref aceUserConfig_config_t struct provided
 *                       by product.
 *
 * @return ACE_STATUS_OK on success, else error code.
 */
void ace_mainWithConfig(aceUserConfig_config_t* ace_config);

/**
 * @brief   Initialize ACE Services, no user config provided.
 *
 * @details A simple wrapper around @ref ace_mainWithConfig with NULL arg.
 */
void ace_main(void);

#ifdef __cplusplus
}
#endif

#endif /* ACE_DOT_H */
/** @} */
